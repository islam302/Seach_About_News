from tkinter import filedialog, messagebox, ttk, Tk, Label, Button, font
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from tkinter import Label, Button, PhotoImage, simpledialog
from urllib.parse import quote, urlparse, urljoin, unquote
from PyQt5.QtWidgets import QFileDialog, QApplication
from ChromeDriver import WebDriver
from urllib.parse import urlparse
from PIL import Image, ImageTk
from bs4 import BeautifulSoup
from tqdm import tqdm
import tkinter as tk
import pandas as pd
import xlsxwriter
import requests
import string
import chardet
import logging
import psutil
import base64
import urllib
import time
import sys
import re
import os
import io




class SearchAboutNews(tk.Tk):

    def __init__(self):
        self.driver = None
        self.current_dir = os.path.dirname(sys.argv[0])
        self.results_folder = os.path.join(self.current_dir, 'RESULTS')
        os.makedirs(self.results_folder, exist_ok=True)

        super().__init__()
        self.title('News Attack')
        self.geometry('600x500')
        self.configure(bg='#282828')

        self.encoded_image = '''/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMo
GhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wgARCAUvBNYDASIAAhEBAxEB/8QAGgABAAIDAQAAAAAAAAAAAAAAAAEFAgMEBv/EABgB
AQEBAQEAAAAAAAAAAAAAAAABAgME/9oADAMBAAIQAxAAAAL1QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRjjCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAFE9BarBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkyX9CjQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMuNByQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBj4SyAB1TiQAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFR+fDhAMvHgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQZNagAl
IQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBhAAFBoYkFOaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAE1G1SDGGO5CI3TDDDDDDDCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWl7zhDX6iDZ7RTTTTTTTTTfSCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAABHbTTTkQDXfgBf/JTTTTTTTTTTTTfSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADIUcccccfS2MeEEMtEscccccccccccccQQAAAAAAAAAAA
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
MMMMMMMMMMMMAAAAAAAAAAAAAAAAAAAAAAAAAABUsMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN4AAAAAAAAAAAAAAAAAAAAAAAAAAAACUMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMNGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAIMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEwsM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUIMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABCQsMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMaEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGUIMMMMMMMMMMMMMMMMMMMMMMMMMMMMcTAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEcMMMMMMMMMMMMMMMMMMMMMMMMYmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGAo8MMMMMMMMMMMMMMMMM9FA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABADEUYcYcsMMIIcmBAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//aAAwDAQACAAMAAAAQ8888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888988688888888888888888888888888888888888888888888888888888888888888888888888888/MK4o8+88888888888
8888888888888888888888888888888888888888888888888888888888888No1gumo188888888888888888888888888888888888888888888888888888888888888888888888
8888Wp7X88888888888888888888888888888888888888888888888888888888888888888888q+1d90sKjv288888888888888888888888888888888888888888888888888888
888888888888889OalZUz8JY38888888888888888888888888888888888888888888888888888888888888888888888e8Upf8v5u888888888888888888888888888888888888
88888888888888888888888888888874288P8uRslU+88888888888888888888888888888888888888888888888888888888888888888oLvO58a1DW/Uj8888888848888888888
8888888888888888888888888888888888888888888888pQPTmNNsTINUBENNNNNNNNNd48888888888888888888888888888888888888888888888888880pBBBAtsBRixJTCCBB
BBBBBBBBBRx48888888888888888888888888888888888888888888888wNd99999qu99o/ftr299999999999999dY088888888888888888888888888888888888888888w1NNNN
NNNNaSHNIuOOYLNNNNNNNNNNNNNNNNNc888888888888888888888888888888888888888pAAAAAAAAAAUIoAEEIEmHAABMAAELPAAAAAAAAAR88888888888888888888888888888
88888888gAAAAAAAAAAAGjJAB+rH6BHA2SAaZSXchAAAAAAAAAx8888888888888888888888888888888885wwwwwwwwwwwww2EYw1/4z+dnxLGwhuiihbwwwwwwwwwwF8888888888
888888888888888888888tMMMMMMMMMMMMMMMeMMM/GK735A67M+INJ3FMMMMMMMMMMMY08888888888888888888888888888hwwwwwwwwwwwwwww3EQwk6SwhYs3C4wID/AOS8sMMM
MMMMMPPPDNPPPPPPPPPPPPPPPPPPPPPPPPPPOAQQQQQQQQQQQQQQQRASwW26hqiENw7AaJ4OEsgQQQQQQQQQQQQQfPPPPPPPPPPPPPPPPPPPPPPPPLDTTTTTTTTTTTTTTTTTKiXH+DWv
ZDSL+TaADTZaTTTTTTTTTTTTTScfPPPPPPPPPPPPPPPPPPPPPPPXfPPPPPPPPPPPPPPPPPLD3/vfbPPPfbPfTXfffXfffffffffffffffTNPPPPPPPPPPPPPPPPPPPPKXfPPPPPPPPPP
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPHPPPPPPPPPPPPPPPPPPPO3PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPfPPPPPPPPPPPPPPO
eAovfffffffffffffffffffffffffffffffffffffffffffffffffffffffffew8/PPPPPPPPPPPJQwA4AQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
Z0AtfPPPPPPPPO4AAFDDDDDDDDDo0swAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAwCRDDDDDDHSgJtvPPPPPPKQAAEkMMMMMMMcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAA3sMMMMMIgAEt/PPPPNgAAADPPPPPPPCAQQQQYCRgAAAAAAAgCADwAAAAAAAAADwhwAAAABCAAAAAAA09fPPPPKCQAE/fPPPoAAAAwAQQQQQSAAAAAAAAAIygAAAWqaw6vN
ywAAAAAHY161sCQwAI8A0sskQAIEAgQQQQaAAAN/PPAAAAAEffffffegFQAAAAAAAABwABb6Kaw6vFASwAAAC4AF61g6EigAwAAAAAAAAQA/PfffegAAAd/P4AAAAHPPPPPLQwBQAAGg
MggAFQAM7DTRipvVABgAAHXTHHrHQ6AFxQRBQAABwgVQAITDDDHCgAAE/KwAAAAMsMMMMIAABAAAIwBAgAEYAgXPPLQAMlgAKAAA9fPLgAE4QAKEYEAAABQAAAAB8ssssoQAAE/IAAAA
B/fffffSAAAAAAMkwwAADAFAdPPKQAAMAAAwEwVfPOKgANAAAwAAAAABQAAAAECgwww0wAAEM6wAAABAwwwww6AAAAAAAAAAABywAwaPNmAAEDOQAwEAbNPLAAArfyBgAAIQAFQAAAAA
AQwww1AAAAMwAAAAN/vvvvvqgAAAAAAAAAAAJiBQfaQAAAH/ADwEIBEH0YMAAALzwkIAAAEABUAAAAADz7776ogAADEAAAAAkIIIIIIgABQAACMDMcAAAtYj2kAAAFNeeBABcn0EoAAB
PXkFMAACEAAUAAAAACIIIIIKsAAAAIAAABDLLLLLIcABUAACoAAUAACoAj2jg4e3xQAWoACb0DIAz68gACMABAAABAAAAAAPLLLLLIMAAAEAAAACEMMMMMMQgAgAABAAEMAACoAPyims
fhVQDAAABPwABc/wqgBeAABUAABYAAAABAMMMMMMAAAAIoAAAAc8888888QCgAAAAAAAAAMAABKKmsOrxTgAAAABQgBeuYOgaEAAAcAAAcAAAAGw888888EABfzoAAAAU88888880qkA
AAAAAAQMMAAABDGoWInMAAAAAACM9atQxAAAAAAYAABYAAADMMMMMMMMkABbzyEAABHLLLLLLLLWtNDDCABNIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMc4ogAAAHLLLLLLLIgAX7zz
8AAA088888888+wYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASa88888888+IBrzzzwoACMMMMMMMMMMMOcogAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4GE
MMMMMMMMMOJL3zzzyy0CM4444444444444/w0000000000000000000000000000000000002zw444444444445sN7zzzzzy0xEwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
wwwwwwwwwwwwwwwwwwwwwwwwxk/zzzzzzzzynPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPOrzzzzzzzzzyyMMMMMMMMMMMMMMMMMMMMMMM44
44888888888888888888888888888844444444445zzzzzzzzzzzys88888888888888888888888888888888888888888888888888888888888888885zzzzzzzzzzzyzDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDCrzzzzzzzzzzzzxrDDDDDDDDDDDDDDjDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDHnDDDDDDDDDDDDDBTzzzzz
zzzzzzzwvzzzzzzzzzzzzyIPXzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzyrb3zzzzzzzzzzzyxzzzzzzzzzzzzzz0Q0000000000BOcUY000000000000000000000000000000xAslI80
000000000bzzzzzzzzzzzzzzzrHHHHHHHHHGPPCION/jHHHHHHHHHHHHHHHHHHHHHHHHHfGZ1BONDHHHHHHHHGHzzzzzzzzzzzzzzzy1X33zzzzzzzzzzzy0MPXPzzzzzzzzzzzzzzzz
zzzzTMMA+bzzzzzzzzzzzzzxfzzzzzzzzzzzzzzzzwvzzzzzzzzzzzzzzy30oCPN3LvzzzzzzzzzzzbOjIAQb9zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxrzzzzzzzzzzzzzzzzw4
QIAADOMLMACANJJAAAA9x/zzzzzzzzzzzzzzzz3zzzzzzzzzzzzzzzzzzzz2gAAAAAAAAAAAAAAAAAAAKKk44sgAAAgcscBNMAAAAAAAAAAAAAAAAAAR7zzzzzzzzzzzzzzzzzzzzz0E
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
sw+LWOnk0xKJXlRxVQ4hTZosUPs400t00QIl5ZLWXSrfyS0T/qPliWTJ8Lmcvkk5VZm3pHCo4Q0OOnW6RjWYeMscnWhKxRQqIektrRr0GFJKTRQofZhDanDRArDMltdNegQkBIoBQcln
DWZXdabU64lDYqpWQRISqZSXS2nT6R3nNW1IcGcwrQ8Sr/E4tnmj/WOUqSFiigDDkkk6hvYXKup2V6oII05PZJKSrVBMIk3VaeL1w3Jtp1uNAAAoBQcneNXVnpu2JIcHbwro8ar/ABGb
cQl1tSFiqTpEWnIqknqaWzqqxJU0mEdfLCAdIrCpZpXoD5QZJvYVCOAjnn6RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkc
A952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952
RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3
nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952RwD3nZHAPedkcA952QJFO1ZgSTX5jCZdpOhAgZNHKVGiSd12w7OrSZfGT0B987MMomGS26KpMT8m5JvXq8qTqq33UmhB/
QebNJddyxrMwxD748VsTzs/MMNzDRbdTVMWjIOSbmXK2dCrsuq+YQej9BrRV4oDeYsiysJR6aHE2I38hdbS6gocSFJOyLTstctVxqq2e1Nyz1VZpuP6DSMm26oPOi+vdUcktKxgurkpR
KuZsMSQU08ttwFKtx/QaTTeyyB0V5LOsIdbKikX6RkP6CoTfrSneeTupvHFJ3H9BLORfTIPNy8ntNF6/fc4foJZSKNqXvPJ7TRfMX3NP6CS6MGyhO4cncTfoUk7RBFCQdI/QKTRhJhA2
aeU2i3eTBOxWX9ArJbyLc+Q5Tabd8xfbU/oFLt4JlKN3KVAKSQdBhxODcUk7P0As9vCTA3Jy8rtVui0uDbkPLnnQ0mpgTgrlRk64GUVHsC/MBo0pUwzNBar0ih5dZjV4xfHSrlc03hWF
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
jzHUhzYMX1S5spSlKOOmT1Dw01ujLc36bDbq/r+Aa7ZwTbMLiUpSlGl86sm+8Mly/tsJLqU/02F3SJ4hYSS2RSjQ3nW2rcm64Deo3L9tj9I+wpVDO3GlizK/UpSlFdYqGmazK0P1z7Gp
v/poYM5k5lswtKUpSlKUpSlKUpSlKUpSlKUpSlKPgytuK4DcMPVcHw/jHbsrix3Fb+3XWXgT7im1NlU1/FKcxJFW2OfksCfcpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlK
UpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSkN+bJ7P+Kpt4ni+BSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpS
lKUpSlKUpSlKUpSlKUyNj9HH+Iy7s8i4lupSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUchGVGhG9Vwf
D+FUNtZY03TU+yPUhI3bctJKtuM1onouC4f3TPOzyc/4KqTVS9AMvsjbMKdn4pMtdWG/IYxcKstdWxia2Ott1tmh3CtZ4/XV0hSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSl
KUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlERN8Tg0SxxrS2R8hms5ji+n7pC5/1H0DWPnaPBX032Lm4uZb040KddOxXmMc3WbHNvPxeq1wbtwd/0TESEiSW
ElsUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpS+KhxT2a5pxif5mNk2Tk1GZ6paXWMPujgQTW31aq
6q9DTnGknTk+XzOsdt2r4Jat8lkf6uyE+i0T1fQZ52uY4tvXwO9OpBVtvREop4Fu+q6LTsUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlK
UpSlKUpSlKUpSlKUpSlKUpSlKUpSlM2K4qWeL3Z6N/FQ46mHhoNdR6y0SR5+d+vHNCmyFTTqa+WRw7GouZfRnoOmi2krhoJfr8Wdl0GtjXsvdrgUpSlKUpSlKUpSlKUpSlKUpSlKUpSl
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
KUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpTLUfuyX3+ESTYurZl+301SSJIklhJedncCttkzZriSy52M+gjb0+OTK5Z81h/QpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKU
pSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpCnm/ZJ/dobMdHY+BO3At+mqmyESSiS+Qj2AtTX2fPYX7qW5eRGv8ApNy1vLUujz9b/wCD
ZFRX1cG3W70S2w9cT5JpI0iaeGmU8dbyOfdy06EWqNshtw6MpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpS
lKUpSlKUpSlKUpSlKUpTlKH6c/lV3SMpJV1umrh47lKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUp
SlKUpSlKUpSmkWnu4KbiIlwXyqGIrKNG0QPNJ4foUpSlL/frIq69dF7u9vl5oxq5MP2nqUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKU
pSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlIgyjpf9P2+XkbEb9B+4pSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSl
KUpSlKUpSlKUpSlKUpSlKUpSlKURRCebPub+X1qI74ValuQK4NOMpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSl
KUpSlKUpSlKUpSlKUpSkUX3Ge+F3+ZlqKL109yvcpSlKUpSlKUpSlL/cYBy6ZyWfdPT5mNV69w/s+xSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSl
KUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSiNCG23EluKRJJHrbPub+Zq8ZXFNRmvFXfGb9ylKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUpSlKUp
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'''

        image_data = base64.b64decode(self.encoded_image)
        image = Image.open(io.BytesIO(image_data))
        resized_image = image.resize((300, 300))
        photo = ImageTk.PhotoImage(resized_image)
        label_image = Label(self, image=photo)
        label_image.image = photo
        label_image.pack(pady=10)

        label_tasks = Label(self, text='Select a task to execute:', font=('Arial', 16), bg='#282828', fg='white')
        label_tasks.pack(pady=10)

        custom_font = font.Font(family="Helvetica", size=12, weight="bold")

        btn_style = {
            'bg': '#006400',
            'fg': 'white',
            'padx': 10,
            'pady': 5,
            'bd': 0,
            'borderwidth': 0,
            'highlightthickness': 0,
            'font': custom_font
        }

        def on_enter_task1(e):
            self.task1_button.config(bg="#004d00")

        def on_leave_task1(e):
            self.task1_button.config(bg="#006400")

        def on_enter_task2(e):
            self.task2_button.config(bg="#004d00")

        def on_leave_task2(e):
            self.task2_button.config(bg="#006400")

        self.task1_button = Button(self, text='Run Task 1', command=self.execute_task1, **btn_style)
        self.task1_button.pack(pady=10)
        self.task1_button.bind("<Enter>", on_enter_task1)
        self.task1_button.bind("<Leave>", on_leave_task1)

        self.task2_button = Button(self, text='Run Task 2', command=self.execute_task2, **btn_style)
        self.task2_button.pack(pady=10)
        self.task2_button.bind("<Enter>", on_enter_task2)
        self.task2_button.bind("<Leave>", on_leave_task2)

    def execute_task1(self):
        try:
            news_articles = self.get_words_from_file('words.txt')
            file = self.select_file()
            links = self.get_domains_from_file(file)

            numbers_arabic = ['الأول', 'الثاني', 'الثالث', 'الرابع', 'الخامس', 'السادس', 'السابع', 'الثامن', 'التاسع',
                              'العاشر']

            for i, news_article in enumerate(news_articles, start=1):
                folder_name_input = f'الخبر {numbers_arabic[i - 1]}'
                folder_name = f'{folder_name_input}Task1'.replace(':', '-').replace('"', '').encode('utf-8').decode(
                    'utf-8')
                folder_path = os.path.join(self.results_folder, folder_name)

                if not folder_name_input or not folder_name_input.strip():
                    tk.messagebox.showerror("Error", "Folder name cannot be empty.")
                    return

                try:
                    os.makedirs(folder_path, exist_ok=True)
                except Exception as e:
                    logging.error(f"Failed to create folder '{folder_path}': {e}")
                    tk.messagebox.showerror("Error", "Failed to create folder.")
                    return

                if not os.path.exists(folder_path):
                    logging.error(f"Folder '{folder_path}' does not exist.")
                    tk.messagebox.showerror("Error", "Folder does not exist.")
                    return

                if folder_name_input and folder_path:
                    self.main1(folder_name_input, news_article, links, folder_path)
                else:
                    tk.messagebox.showerror("Error", "Folder name or path is invalid.")

            tk.messagebox.showinfo("Task Completed", "Task 1 completed successfully!")
        except Exception as e:
            print(e)

    def execute_task2(self):
        try:
            self.main2()  # Run the main method
            messagebox.showinfo("Task Completed", "Task 2 completed successfully!")
        except Exception as e:
            pass

    def start_driver(self):
        self.driver = WebDriver.start_driver(self)
        return self.driver

    def killDriverZombies(self, driver_pid):
        try:
            parent_process = psutil.Process(driver_pid)
            children = parent_process.children(recursive=True)
            for process in [parent_process] + children:
                process.terminate()
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    def get_words_from_file(self, words_file_path):
        encodings = ['utf-8', 'latin-1', 'utf-16', 'utf-32', 'iso-8859-1', 'windows-1252']
        for encoding in encodings:
            try:
                with open(words_file_path, 'r', encoding=encoding) as file:
                    lines = file.read().splitlines()
                news_articles = []
                current_article = []
                for line in lines:
                    if line.startswith('الخبر'):
                        if current_article:
                            news_articles.append(current_article)
                        current_article = []
                    else:
                        current_article.append(line)
                if current_article:
                    news_articles.append(current_article)
                return news_articles
            except Exception as e:
                print(f"Error reading file with encoding {encoding}: {e}")
        return []

    def get_domains_from_file(self, words_file_path):
        try:
            with open(words_file_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
            domains = []
            for i in range(0, len(lines), 2):
                domain = lines[i + 1].strip()
                if domain:
                    domains.append(domain)
            return domains
        except FileNotFoundError:
            print(f'File {words_file_path} not found.')
            return []
        except Exception as e:
            print(f'Error reading file {words_file_path}: {e}')
            return []

    def get_search_links(self, words_file_path):
        encodings = ['utf-8', 'latin-1', 'utf-16', 'utf-32', 'iso-8859-1',
                     'windows-1252']
        for encoding in encodings:
            try:
                with open(words_file_path, 'r', encoding=encoding) as file:
                    words = file.readlines()
                return list(words)
            except UnicodeDecodeError:
                continue

    def get_publish_date(self, link):
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        try:
            response = requests.get(link)
            if response.status_code == 200:
                encoding = chardet.detect(response.content)['encoding']
                response.encoding = encoding
                html_content = response.text
                soup = BeautifulSoup(html_content, 'html.parser')

                link_text = soup.get_text()
                date_match = re.search(r'\b\d{1,2}\s+\w+\s+\d{4}\b', link_text, re.IGNORECASE | re.UNICODE)
                if date_match:
                    link_date = date_match.group()
                    return link_date.strip()

                date_patterns = [
                    r'\b(\d{4}/\d{2}/\d{2})\b',
                    r'\b(\d{1,2}/\d{1,2}/\d{2,4})\b',
                    r'\b(\d{1,2}\s+\w+\s+\d{2,4})\b',
                    r'\b(\d{4}-\d{2}-\d{2})\b',
                    r'\b(\d{1,2}\s+\w+\s+\d{4})\b',
                    r'\b(\d{1,2}\s+(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+\d{2,4})\b',
                    r'\b(\d{1,2}/\d{1,2}/\d{2,4}\s+\d{1,2}:\d{2})\b',
                    r'\b(\d{1,2}\s+\w+\s+/\s+\w+\s+\d{2,4})\b',
                    r'\b(\d{1,2}\s+\w+\s+\d{4}\s+\d{1,2}:\d{2}:\d{2})\b',
                    r'\b(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\b',
                    r'\b(\d{1,2}/\d{1,2}/\d{2,4}\s+\d{1,2}:\d{2}:\d{2})\b',
                    r'\b(\d{1,2}\s+\w+\s+\d{4}\s+\d{1,2}:\d{2}:\d{2})\b',
                    r'\b(\d{1,2}\s+[?-?]+\s+\d{4})\b',
                    r'\b(\d{1,2}/\d{1,2}/\d{2,4})\s+[?-?]+\s+\d{1,2}:\d{2}\b',
                    r'\b(\d{1,2}\s+[\u0623-\u064a]+\s+\d{4})\b',
                    r'\b(\d{1,2}\s+[\u0623-\u064a]+\s+/\s+[\u0623-\u064a]+\s+\d{2,4})\b',
                    r'(\d{4}/\d{2}/\d{2}/)'
                ]

                for pattern in date_patterns:
                    date_match = re.search(pattern, html_content, re.IGNORECASE | re.UNICODE)
                    if date_match:
                        link_date = date_match.group()
                        return link_date.strip()

                time_tags = soup.find_all('time', class_=re.compile(r'.*'))
                for time_tag in time_tags:
                    datetime_attr = time_tag.get('datetime')
                    if datetime_attr:
                        arabic_date = time_tag.text.strip()
                        return arabic_date

                link_date_match = re.search(r'(\d{4}-\d{2}-\d{2})', link)
                if link_date_match:
                    return link_date_match.group()

            return None
        except:
            return None

    def get_title(self, link):
        try:
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
            response = requests.get(link)
            if response.status_code == 200:
                encoding = chardet.detect(response.content)['encoding']
                response.encoding = encoding
                html_content = response.text
                soup = BeautifulSoup(html_content, 'html.parser')
                title = soup.title.string.strip()
                return title
        except:
            return None

    def close_driver(self):
        if self.driver:
            self.driver.quit()
            self.driver = None

    def select_file(self):
        app = QApplication(sys.argv)
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("Text files (*.txt)")
        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            return selected_files[0] if selected_files else None
        return None

    def get_response(self, words, links, folder_path):
        found_links = {}
        not_working_links = []
        not_working_links_file = os.path.join(folder_path, 'not_working_links.txt')  # Define not_working_links_file
        try:
            for word in words:
                found_links[word] = []
                for link in links:
                    try:
                        link_counter = 0
                        match_link = False
                        quoted_word = quote(word)
                        URL = f'{link}{quoted_word}'
                        response = requests.get(URL)
                        if response.status_code == 200:
                            soup = BeautifulSoup(response.content, 'html.parser')
                            all_links = soup.find_all('a', href=True)
                            search_url_parsed = urlparse(link)
                            domain = f'{search_url_parsed.scheme}://{search_url_parsed.netloc}'
                            for a_tag in all_links:
                                href = a_tag.get('href')
                                if href:
                                    full_link = urljoin(domain, href)
                                    text = a_tag.get_text().lower()
                                    if any(w.lower() in text for w in words):
                                        date = self.get_publish_date(full_link)
                                        title = self.get_title(full_link)
                                        found_links[word].append({'Link': full_link, 'Date': date, 'Title': title})
                                        match_link = True
                                        link_counter += 1
                                        if link_counter >= 5:
                                            break
                            if not match_link:
                                not_working_links.append(link)
                        else:
                            not_working_links.append(link)
                    except Exception as e:
                        not_working_links.append(link)
                        print(f"Error processing link {link}: {e}")

            if not_working_links_file is not None:  # Check if not_working_links_file is not None
                try:
                    with open(not_working_links_file, 'w') as f:
                        for link in not_working_links:
                            f.write(f"{link}\n")
                except FileNotFoundError as e:
                    print(f"File not found error: {e}")
                except PermissionError as e:
                    print(f"Permission error: {e}")
                except Exception as e:
                    print(f"Error writing file: {e}")

        except Exception as e:
            print(f"Error in get_response: {e}")

        return found_links

    def get_searching_links(self, words, links, folder_path):
        found_links = {}
        not_working_links = []

        for word in words:
            found_links[word] = []
            for base_url in links:
                try:
                    encoded_word = quote(word)
                    response = requests.get(base_url + encoded_word)
                    response.raise_for_status()

                    if response.status_code == 200:
                        soup = BeautifulSoup(response.content, "html.parser")
                        search_results = soup.find_all(
                            "a") if base_url != 'https://search.yahoo.com/search?p=' else soup.find_all("div",
                                                                                                        class_="algo-sr")

                        links_found = 0
                        for result in search_results:
                            if links_found >= 10:  # Change to retrieve the first ten search results
                                break
                            link = result.find("a") if base_url == 'https://search.yahoo.com/search?p=' else result
                            if link:
                                href = link.get("href")
                                if href and (href.startswith("/url?q=") or href.startswith("http")):
                                    href = href.replace("/url?q=", "").split("&sa=")[0]
                                    if not href.startswith(('data:image', 'javascript', '#', 'https://maps.google')):
                                        found_links[word].append({'link': unquote(href)})
                                        links_found += 1

                except requests.exceptions.RequestException as e:
                    not_working_links.append(base_url)
                except AttributeError as e:
                    not_working_links.append(base_url)

        for word, links_info in found_links.items():
            for link_info in links_info:
                link = link_info['link']
                try:
                    date = self.get_publish_date(link)
                    link_info['date'] = date if date else 'not found'

                    title = self.get_title(link)
                    link_info['title'] = title if title else 'not found'
                except Exception as e:
                    print(f"Error processing link {link}: {e}")

        not_working_links_file = os.path.join(folder_path, 'not_working_links.txt')
        with open(not_working_links_file, 'w') as f:
            for link in not_working_links:
                f.write(f"{link}\n")

        return found_links

    def main1(self, folder_name, word_group, links, folder_path):
        found_links = self.get_response(word_group, links, folder_path)
        data = []
        for word, link_data_list in found_links.items():
            for link_data in link_data_list:
                link = link_data.get('Link', 'not found')
                date = link_data.get('Date', 'not found')
                title = link_data.get('Title', 'not found')
                data.append({'Link': link, 'Date': date, 'Title': title})

        excel_path = os.path.join(folder_path, f'links_and_dates.xlsx')
        df = pd.DataFrame(data)
        writer = pd.ExcelWriter(excel_path, engine='xlsxwriter')
        df.to_excel(writer, sheet_name='Sheet1', index=False)
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        cell_format = workbook.add_format({'font_color': 'blue', 'underline': True})
        worksheet.set_column('A:Z', 50, cell_format)
        writer._save()

    def main2(self):
        file = self.select_file()
        links = self.get_search_links(file)
        news_articles = self.get_words_from_file('words.txt')

        for i, news_article in enumerate(news_articles, start=1):
            folder_name = f'الخبر {i} Task2'.replace(':', '-').replace('"', '').encode(
                'utf-8').decode('utf-8')
            folder_path = os.path.join(self.results_folder, folder_name)
            os.makedirs(folder_path, exist_ok=True)

            self.start_driver()
            found_links = self.get_searching_links(news_article, links, folder_path)  # Pass news article as a list
            driver_pid = self.driver.service.process.pid
            self.killDriverZombies(driver_pid)

            data = []
            for link_data_list in found_links.get(news_article[0], []):
                if not link_data_list:
                    data.append({'Link': 'not found', 'Date': 'not found', 'Title': 'not found'})
                else:
                    if isinstance(link_data_list, dict):
                        link_data_list = [link_data_list]

                    for link_data in link_data_list:
                        link = link_data.get('link', 'not found')
                        date = link_data.get('date', 'not found')
                        title = link_data.get('title', 'not found')
                        if date is None:
                            date = 'not found'
                        if title is None:
                            title = 'not found'
                        data.append({'Link': link, 'Date': date, 'Title': title})

            excel_path = os.path.join(folder_path, f'links_and_dates.xlsx')
            df = pd.DataFrame(data)
            writer = pd.ExcelWriter(excel_path, engine='xlsxwriter')
            df.to_excel(writer, index=False)

            workbook = writer.book
            worksheet = writer.sheets['Sheet1']
            worksheet.set_column('A:Z', 50)

            writer._save()


if __name__ == '__main__':
    app = SearchAboutNews()
    app.mainloop()






